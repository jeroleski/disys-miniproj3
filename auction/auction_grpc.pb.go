// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuctionServiceClient is the client API for AuctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionServiceClient interface {
	MakeBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Response, error)
	GetStreamHighestbid(ctx context.Context, in *Request, opts ...grpc.CallOption) (AuctionService_GetStreamHighestbidClient, error)
	Result(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Bid, error)
	GetStreamTimeleft(ctx context.Context, in *Request, opts ...grpc.CallOption) (AuctionService_GetStreamTimeleftClient, error)
	UpdateHighestBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Response, error)
	ServerBackup(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*Void, error)
}

type auctionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionServiceClient(cc grpc.ClientConnInterface) AuctionServiceClient {
	return &auctionServiceClient{cc}
}

func (c *auctionServiceClient) MakeBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/auction.AuctionService/MakeBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) GetStreamHighestbid(ctx context.Context, in *Request, opts ...grpc.CallOption) (AuctionService_GetStreamHighestbidClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuctionService_ServiceDesc.Streams[0], "/auction.AuctionService/GetStreamHighestbid", opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionServiceGetStreamHighestbidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuctionService_GetStreamHighestbidClient interface {
	Recv() (*Bid, error)
	grpc.ClientStream
}

type auctionServiceGetStreamHighestbidClient struct {
	grpc.ClientStream
}

func (x *auctionServiceGetStreamHighestbidClient) Recv() (*Bid, error) {
	m := new(Bid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auctionServiceClient) Result(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Bid, error) {
	out := new(Bid)
	err := c.cc.Invoke(ctx, "/auction.AuctionService/Result", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) GetStreamTimeleft(ctx context.Context, in *Request, opts ...grpc.CallOption) (AuctionService_GetStreamTimeleftClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuctionService_ServiceDesc.Streams[1], "/auction.AuctionService/GetStreamTimeleft", opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionServiceGetStreamTimeleftClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuctionService_GetStreamTimeleftClient interface {
	Recv() (*Time, error)
	grpc.ClientStream
}

type auctionServiceGetStreamTimeleftClient struct {
	grpc.ClientStream
}

func (x *auctionServiceGetStreamTimeleftClient) Recv() (*Time, error) {
	m := new(Time)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auctionServiceClient) ServerBackup(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/auction.AuctionService/ServerBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionServiceServer is the server API for AuctionService service.
// All implementations must embed UnimplementedAuctionServiceServer
// for forward compatibility
type AuctionServiceServer interface {
	MakeBid(context.Context, *Bid) (*Response, error)
	GetStreamHighestbid(*Request, AuctionService_GetStreamHighestbidServer) error
	Result(context.Context, *Void) (*Bid, error)
	GetStreamTimeleft(*Request, AuctionService_GetStreamTimeleftServer) error
	UpdateHighestBid(context.Context, *Bid) (*Response, error)
	ServerBackup(context.Context, *Backup) (*Void, error)
	mustEmbedUnimplementedAuctionServiceServer()
}

// UnimplementedAuctionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionServiceServer struct {
}

func (UnimplementedAuctionServiceServer) MakeBid(context.Context, *Bid) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBid not implemented")
}
func (UnimplementedAuctionServiceServer) GetStreamHighestbid(*Request, AuctionService_GetStreamHighestbidServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamHighestbid not implemented")
}
func (UnimplementedAuctionServiceServer) Result(context.Context, *Void) (*Bid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedAuctionServiceServer) GetStreamTimeleft(*Request, AuctionService_GetStreamTimeleftServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamTimeleft not implemented")
}
func (UnimplementedAuctionServiceServer) ServerBackup(context.Context, *Backup) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerBackup not implemented")
}
func (UnimplementedAuctionServiceServer) mustEmbedUnimplementedAuctionServiceServer() {}

// UnsafeAuctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionServiceServer will
// result in compilation errors.
type UnsafeAuctionServiceServer interface {
	mustEmbedUnimplementedAuctionServiceServer()
}

func RegisterAuctionServiceServer(s grpc.ServiceRegistrar, srv AuctionServiceServer) {
	s.RegisterService(&AuctionService_ServiceDesc, srv)
}

func _AuctionService_MakeBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).MakeBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.AuctionService/MakeBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).MakeBid(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_GetStreamHighestbid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuctionServiceServer).GetStreamHighestbid(m, &auctionServiceGetStreamHighestbidServer{stream})
}

type AuctionService_GetStreamHighestbidServer interface {
	Send(*Bid) error
	grpc.ServerStream
}

type auctionServiceGetStreamHighestbidServer struct {
	grpc.ServerStream
}

func (x *auctionServiceGetStreamHighestbidServer) Send(m *Bid) error {
	return x.ServerStream.SendMsg(m)
}

func _AuctionService_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.AuctionService/Result",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).Result(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_GetStreamTimeleft_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuctionServiceServer).GetStreamTimeleft(m, &auctionServiceGetStreamTimeleftServer{stream})
}

type AuctionService_GetStreamTimeleftServer interface {
	Send(*Time) error
	grpc.ServerStream
}

type auctionServiceGetStreamTimeleftServer struct {
	grpc.ServerStream
}

func (x *auctionServiceGetStreamTimeleftServer) Send(m *Time) error {
	return x.ServerStream.SendMsg(m)
}

func _AuctionService_ServerBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Backup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).ServerBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auction.AuctionService/ServerBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).ServerBackup(ctx, req.(*Backup))
	}
	return interceptor(ctx, in, info, handler)
}

// AuctionService_ServiceDesc is the grpc.ServiceDesc for AuctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auction.AuctionService",
	HandlerType: (*AuctionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeBid",
			Handler:    _AuctionService_MakeBid_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _AuctionService_Result_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamHighestbid",
			Handler:       _AuctionService_GetStreamHighestbid_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStreamTimeleft",
			Handler:       _AuctionService_GetStreamTimeleft_Handler,
			ServerStreams: true,
		},
		{
			MethodName: "ServerBackup",
			Handler:    _AuctionService_ServerBackup_Handler,
		},
	},
	Metadata: "auction/auction.proto",
}
